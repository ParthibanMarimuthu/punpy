<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="antliae" name="pytest" skipped="0" tests="5" time="130.103" timestamp="2020-09-11T17:26:29.602291"><testcase classname="punpy.mc.tests.test_mc_propagation.TestMCPropagation" file="punpy\mc\tests\test_mc_propagation.py" line="187" name="test_propagate_both" time="13.293"></testcase><testcase classname="punpy.mc.tests.test_mc_propagation.TestMCPropagation" file="punpy\mc\tests\test_mc_propagation.py" line="273" name="test_propagate_cov" time="9.628"></testcase><testcase classname="punpy.mc.tests.test_mc_propagation.TestMCPropagation" file="punpy\mc\tests\test_mc_propagation.py" line="84" name="test_propagate_random" time="39.308"><failure message="AssertionError: 
Not equal to tolerance rtol=1e-07, atol=0.05

Mismatched elements: 1 / 480 (0.208%)
Max absolute difference: 0.05380814
Max relative difference: 0.01345203
 x: array([[[[8.788430e-05, 8.739791e-05, 8.761474e-05, 8.796424e-05],
         [8.705867e-05, 8.761455e-05, 8.802909e-05, 8.751263e-05],
         [8.729236e-05, 8.788807e-05, 8.765515e-05, 8.809022e-05]],...
 y: array([[[[0., 0., 0., 0.],
         [0., 0., 0., 0.],
         [0., 0., 0., 0.]],...">self = &lt;punpy.mc.tests.test_mc_propagation.TestMCPropagation testMethod=test_propagate_random&gt;

    def test_propagate_random(self):
        prop = MCPropagation(40000)
    
        uf,ucorr = prop.propagate_random(function,xs,xerrs,return_corr=True)
        npt.assert_allclose(ucorr,np.eye(len(ucorr)),atol=0.05)
        npt.assert_allclose(uf,yerr_uncorr,rtol=0.05)
        ucov= prop.convert_corr_to_cov(ucorr,uf)
        ucorr2= prop.convert_cov_to_corr(ucov,uf)
        npt.assert_allclose(ucorr,ucorr2,atol=0.01)
    
        uf = prop.propagate_random(function,xs,xerrs,corr_between=np.ones((2,2)))
        npt.assert_allclose(uf,yerr_corr,rtol=0.05)
    
        uf,ucorr,yvalues,xvalues = prop.propagate_random(function,xs,xerrs,return_corr=True,return_samples=True)
        npt.assert_allclose(uf,yerr_uncorr,rtol=0.05)
    
        uf,yvalues,xvalues = prop.propagate_random(function,xs,xerrs,corr_between=np.ones((2,2)),return_samples=True)
        npt.assert_allclose(uf,yerr_corr,rtol=0.05)
    
        #b
        ufb,ucorrb = prop.propagate_random(functionb,xsb,xerrsb,return_corr=True)
        npt.assert_allclose(ucorrb,np.eye(len(ucorrb)),atol=0.05)
        npt.assert_allclose(ufb,yerr_uncorrb,rtol=0.05)
    
        ufb = prop.propagate_random(functionb,xsb,xerrsb,corr_between=np.ones((2,2)))
        npt.assert_allclose(ufb,yerr_corrb,atol=0.03)
    
        ufb,yvaluesb,xvaluesb = prop.propagate_random(functionb,xsb,xerrsb,corr_between=np.ones((2,2)),
                                                   return_samples=True)
        npt.assert_allclose(ufb,yerr_corrb,atol=0.03)
    
        #c
        ufc,ucorrc = prop.propagate_random(functionc,xsc,xerrsc,return_corr=True)
        npt.assert_allclose(ucorrc,np.eye(len(ucorrc)),atol=0.05)
        npt.assert_allclose(ufc,yerr_uncorrc,rtol=0.05)
    
        ufc = prop.propagate_random(functionc,xsc,xerrsc,corr_between=corr_c)
        npt.assert_allclose(ufc,yerr_corrc,rtol=0.05)
    
        ufc,yvaluesc,xvaluesc = prop.propagate_random(functionc,xsc,xerrsc,corr_between=corr_c,return_samples=True)
        npt.assert_allclose(ufc,yerr_corrc,rtol=0.05)
    
        #d
        ufd,ucorrd,corr_out = prop.propagate_random(functiond,xsd,xerrsd,return_corr=True,output_vars=2)
        npt.assert_allclose(ucorrd[0],np.eye(len(ucorrd[0])),atol=0.05)
        npt.assert_allclose(ufd,yerr_uncorrd,rtol=0.05)
    
        ufd,ucorrd,corr_out,yvalues,xvalues = prop.propagate_random(functiond,xsd,xerrsd,return_corr=True,output_vars=2,return_samples=True)
        npt.assert_allclose(ucorrd[1],np.eye(len(ucorrd[1])),atol=0.05)
    
        ufd = prop.propagate_random(functiond,xsd,xerrsd,corr_between=corr_d,output_vars=2)
        npt.assert_allclose(ufd[0],yerr_corrd[0],atol=0.05)
        npt.assert_allclose(ufd[1],yerr_corrd[1],rtol=0.05)
    
        ufd,yvaluesd,xvaluesd = prop.propagate_random(functiond,xsd,xerrsd,corr_between=corr_d,return_samples=True,output_vars=2)
&gt;       npt.assert_allclose(ufd,yerr_corrd,atol=0.05)
E       AssertionError: 
E       Not equal to tolerance rtol=1e-07, atol=0.05
E       
E       Mismatched elements: 1 / 480 (0.208%)
E       Max absolute difference: 0.05380814
E       Max relative difference: 0.01345203
E        x: array([[[[8.788430e-05, 8.739791e-05, 8.761474e-05, 8.796424e-05],
E                [8.705867e-05, 8.761455e-05, 8.802909e-05, 8.751263e-05],
E                [8.729236e-05, 8.788807e-05, 8.765515e-05, 8.809022e-05]],...
E        y: array([[[[0., 0., 0., 0.],
E                [0., 0., 0., 0.],
E                [0., 0., 0., 0.]],...

punpy\mc\tests\test_mc_propagation.py:140: AssertionError</failure></testcase><testcase classname="punpy.mc.tests.test_mc_propagation.TestMCPropagation" file="punpy\mc\tests\test_mc_propagation.py" line="141" name="test_propagate_systematic" time="57.310"></testcase><testcase classname="punpy.mc.tests.test_mc_propagation.TestMCPropagation" file="punpy\mc\tests\test_mc_propagation.py" line="233" name="test_propagate_type" time="8.670"></testcase></testsuite></testsuites>